/*

Basic Authentication is the simplest and most common method for sending user credentials to a server. It involves sending the username and password with every request, allowing the server to verify the user's identity.

ðŸ’¡ The Mechanism
The authentication process requires the client to include an Authorization request header with the following format:

Combine the username and password separated by a colon (e.g., user:password).

Encode this combined string using Base64. (This is encoding, not encryption!)

Prepend the scheme Basic  (with a space) to the encoded string.

Security Warning: Since Base64 is easily reversible, Basic Authentication must ONLY be used over an HTTPS (SSL/TLS) connection to ensure the encoded credentials cannot be intercepted by third parties.

ðŸ’» JavaScript Example with Axios
Axios provides a clean and convenient way to implement Basic Auth using the auth configuration object, which handles the Base64 encoding for you automatically.
*/


// script.js

// Conceptual API endpoint requiring Basic Auth
const PROTECTED_API_URL = 'https://api.example.com/protected/data'; 

// Credentials to send
const USERNAME = 'adminUser';
const PASSWORD = 'superSecretPassword';


async function fetchDataWithBasicAuth() {
  try {
    console.log("Sending request using Axios Basic Auth configuration...");
    
    const response = await axios.get(PROTECTED_API_URL, {
      // 1. Use the 'auth' object in Axios config
      auth: {
        username: USERNAME,
        password: PASSWORD
      }
    });
    
    console.log(`\nâœ… Access Granted! Status: ${response.status}`);
    console.log("Data successfully retrieved from the protected resource.");

  } catch (error) {
    // A failed Basic Auth request usually returns a 401 Unauthorized status
    if (error.response && error.response.status === 401) {
      console.error('ðŸ›‘ Authentication Failed:', 'Invalid username or password.');
    } else {
      console.error('Request Error:', error.message);
    }
  }
}

fetchDataWithBasicAuth();


/*
--- Educational Note: Manual Encoding ---
If you were to do this manually with fetch or a lower-level library, 
the JavaScript code would look like this:

const credentials = `${USERNAME}:${PASSWORD}`;
const encodedString = btoa(credentials); // btoa is the browser's Base64 encoder

const headers = {
    'Authorization': `Basic ${encodedString}`
};
// Then, you would pass 'headers' to your fetch or axios config.
*/
