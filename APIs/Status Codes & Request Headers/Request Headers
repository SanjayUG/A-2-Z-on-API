/*
1. Request Headers
Request Headers are key-value pairs of metadata sent along with the HTTP request (like an envelope containing a letter). They provide the server with context about the request or the client.

User Information: Headers like User-Agent (browser/OS info) and the client's IP address (derived from network headers) are automatically sent by the browser or environment and interpreted by the server.

Common Use: You manually configure headers for things like:

Authorization: Sending a token to prove identity (Authorization: Bearer <token>).

Content Type: Telling the server what format the request body is in (Content-Type: application/json).
Accept: Telling the server what format you expect the response in.


2. Path Variables
Path Variables (or Route Parameters) are essential for identifying a specific resource. They are embedded directly within the URL path.

Format: /resource/value

Usage: Used to retrieve, update, or delete a single, unique item.

Example: To get the user with ID 5: /users/5

3. Query Parameters
Query Parameters are used for filtering, sorting, or paginating a collection of resources. They are appended to the URL after a question mark (?) and consist of key-value pairs separated by an ampersand (&).

Format: /resource?key1=value1&key2=value2

Usage: Used when you need a subset of data or to modify the presentation of a list.

Example: To get all posts written by user ID 1: /posts?userId=1
*/



// script.js

const API_BASE_URL = 'https://jsonplaceholder.typicode.com';

// Path Variable: The ID of the user we want to filter by
const userId = 1;

// Custom Header: A mocked Authorization token for demonstration
const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mock-token'; 

async function getUserPosts() {
    // 1. Path Variable: Used directly in the URL to target the /posts endpoint
    const url = `${API_BASE_URL}/posts`; 
    
    // 2. Query Parameters: Sent via the 'params' object in Axios
    const queryParams = {
        userId: userId, // Filters posts for a specific user
        _limit: 5      // Limits the response to 5 items (for brevity)
    };

    try {
        console.log(`Sending request for User ${userId}'s posts...`);
        
        const response = await axios.get(url, {
            // 3. Custom Header: Configure headers via the 'headers' object
            headers: {
                'Authorization': `Bearer ${authToken}`, // Sends the auth token
                'Custom-Context': 'Fetching User Posts'  // Send a custom header
            },
            params: queryParams // Attach the query parameters to the URL
        });
        
        console.log(`âœ… Success! Status: ${response.status}`);
        console.log(`Received ${response.data.length} posts.`);
        console.log(`\nTitle of the first post: ${response.data[0].title}`);
        console.log(`\nActual URL Sent: ${response.request.responseURL}`);
        
    } catch (error) {
        console.error('Request Error:', error.message);
    }
}

getUserPosts();

/*
The final URL constructed by Axios will look similar to this:
https://jsonplaceholder.typicode.com/posts?userId=1&_limit=5
*/
